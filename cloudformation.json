{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Template for creating a simple lambda function and linking it into API gateway",
  "Parameters" : {
    "LambdaS3Bucket" : {
      "Description" : "The S3 bucket where code for lambdas is stored",
      "Type" : "String"
    },
    "LambdaS3Key" : {
      "Description" : "The S3 key for lambda function",
      "Type" :  "String"
    },
    "ApiName" : {
      "Description" : "Name of the ApiGateway API to create",
      "Type": "String"
    }
  },

  "Resources" : {
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{ "Effect": "Allow", "Principal": {"Service": ["lambda.amazonaws.com"]}, "Action": ["sts:AssumeRole"] }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{ "Effect": "Allow", "Action": ["logs:*"], "Resource": "arn:aws:logs:*:*:*" }]
          }
        }]
      }
    },
    "Lambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Code": {
          "S3Bucket": { "Ref" : "LambdaS3Bucket" },
          "S3Key": { "Ref" : "LambdaS3Key" }
        },
        "Runtime": "nodejs4.3",
        "Timeout": "25"
      }
    },
    "LambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Fn::GetAtt" : ["Lambda", "Arn"] },
        "Principal": "apigateway.amazonaws.com"
      },
      "DependsOn": [
        "Lambda"
      ]
    },
    "LambdaApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Description": "A test API",
        "Name": { "Ref" : "ApiName" }
      }
    },
    "LambdaMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "LambdaApi" },
        "ResourceId": { "Fn::GetAtt": ["LambdaApi", "RootResourceId"] },
        "HttpMethod": "POST",
        "AuthorizationType": "NONE",
        "MethodResponses" : [{ "StatusCode" : "200" }],
        "Integration": {
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/",
                { "Fn::GetAtt": [ "Lambda", "Arn" ] },
                "/invocations"
              ]
            ]
          },
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [{
            "StatusCode": "200"
          }],
          "RequestTemplates": { "application/json": "$input.json('$')" }
        }
      }
    },
    "Deployment": {
      "DependsOn": "LambdaMethod",
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": { "Ref": "LambdaApi" },
        "Description": "My deployment",
        "StageName": "DummyStage"
      }
    },
    "Prod": {
      "DependsOn": "Deployment",
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "StageName": "Prod",
        "Description": "Prod Stage",
        "RestApiId": { "Ref": "LambdaApi" },
        "DeploymentId": { "Ref": "Deployment" }
      }
    }

  },

  "Outputs" : {
    "LambdaArn": {
      "Description": "Arn of the created lambda function",
      "Value": { "Fn::GetAtt": [ "Lambda", "Arn" ] }
    }
  }
}
