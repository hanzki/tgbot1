---
- hosts: all
  vars:
    aws_region: eu-west-1
    bucket_name: tgbot1-bucket
    cf_template_s3_key: cloudformation.json
    cf_template_path: cloudformation.json
    lambda_s3_key: lambda2.zip
    lambda_path: output.zip
    cf_stack_name: tgbot1
  tasks:
    - name: Create project S3 bucket
      s3: bucket={{ bucket_name }} region={{ aws_region }} mode=create

    - name: Copy lambda code to S3 bucket
      s3: bucket={{ bucket_name }} region={{ aws_region }} mode=put object={{ lambda_s3_key }} src={{ lambda_path }}

    - name: Copy cloudformation template to S3 bucket
      s3: bucket={{ bucket_name }} region={{ aws_region }} mode=put object={{ cf_template_s3_key }} src={{ cf_template_path }}

    - debug: msg="telegram token = {{ lookup('env','TELEGRAM_BOT_TOKEN') }}"

    - name: Create cloudformation stack
      cloudformation:
        stack_name: "{{ cf_stack_name }}"
        state: present
        region: "{{ aws_region }}"
        disable_rollback: true
        template: "{{ cf_template_path }}"
        template_parameters:
          LambdaS3Bucket: "{{ bucket_name }}"
          LambdaS3Key: "{{ lambda_s3_key }}"
          ApiName: "ansible-tgbot1"
          TelegramBotToken: "{{ lookup('env','TELEGRAM_BOT_TOKEN') }}"
        tags:
          Stack: "{{ cf_stack_name }}"
      register: stack

    - name: update lambda function
      shell: aws lambda update-function-code --region {{ aws_region }} --function-name {{ stack.stack_outputs.LambdaArn }} --s3-bucket {{ bucket_name }} --s3-key {{ lambda_s3_key }}
